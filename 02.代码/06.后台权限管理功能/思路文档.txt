在公司的后台管理项目中,会具有等级的划分,最少分为两级:
    1.管理员
        管理员拥有当前项目所有模块的访问权和所有功能的使用权

    2.访客
        访客拥有当前项目部分模块的访问权和部分功能的使用权

权限管理功能由两部分组成,第一部分是路由级别的权限管理,第二部分是按钮级别的权限管理

路由级别的权限管理
需求:根据用户的账号权限,控制用户可以访问哪些路由模块
拆解:
    1.根据用户的账号权限
        应该是在用户登录帐号的时候才能得知
            login接口->将用户的帐号密码发给服务器,兑换用户的唯一标识token字符串
                token字符串,是后端根据用户的唯一标识id,以及加密字符串,配合当前加密时间,编译得到的一个乱码字符串
                    服务器可以通过token反向解密得到原本的id

            info接口->将用户的token字符串发给服务器,兑换用户的身份信息
                avatar->用户头像链接
                name->用户昵称
                buttons->用于实现按钮级别权限管理
                routes->用于实现路由级别的权限管理
                    内部存储这当前账号能够访问的路由别名
                    数据类型:Array<string>

    2.控制用户可以访问哪些路由模块
        问题:如何让用户无法使用某个路由
        回答:
            方案一:将某些路由的注册删除,故意不注册某些路由
                那么用户就无法使用

            方案二:使用导航守卫来监视用户的跳转,如果用户跳转他没有资格访问的路由
                那么就next(false),拒绝他的本次访问

            第一种方案更加稳妥,业务逻辑更加简单,不容易出错,所以公司中使用频率极高
    
        问题:项目启动之后,如何动态注册新路由?
        回答:
            1.router.addRoute(RouteObj)
                这个API用于注册一个路由

            1.router.addRoutes(数组)    ->  数组内部存放多个RouteObj
                这个API用于注册一堆路由


路由级别权限管理思路流程:
    1.将原本的常量路由数组切割为三个路由数组
        分为常量路由,异步路由,任意路由

    2.当info接口请求成功之后,将用户的个人权限信息routes数组保存在VueX中

    3.根据当前项目完整的异步路由数组,以及请求回来的路由别名数组进行过滤操作
        最终返回一个当前账号有资格访问的异步路由组成的数组

        过滤流程:
            1.使用filter过滤当前完整的异步路由数组
            2.获取到每个路由对象的名称,去路由别名数组中查找
                如果有找到相同的名字,就说明有资格使用,就会保留这部分路由
                如果没找到就过滤掉

            3.在遍历的过程中,我们还会观察当前路由对象是否有children数组,
                如果有children就需要递归处理该数组的内容

    4.使用router.addRoutes语法,将流程3中得到的数组,进行动态注册
        注册完之后,用户就可以正常访问了
    